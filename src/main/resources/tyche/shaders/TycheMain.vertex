#version 150 core

in vec3 Vertex;
in vec2 TexCoord;
in vec4 Color;
in float LightPcnt;
in vec4 LightColor;
in vec3 Normal;
in vec2 Billboard;

out vec3 positionV;
out vec4 colorV;
out vec2 texCoordV;
out vec3 normalV;
out float lightPcntV;
out vec3 lightColorV;

uniform mat4 ProjectionMatrix;
uniform mat4 ModelViewMatrix;


vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


void main (){
    texCoordV = TexCoord;

    vec3 rgbColor = Color.rgb;
    colorV = vec4(rgbColor, Color.a);

    //vec3 hsvColor = Color.rgb;
    //hsvColor.b *= step(0.2,VisionPcnt);
    ////hsvColor.gb *= 1.0 - (Vertex.z / 3.0);

    //vec3 adjustedColor = hsv2rgb(hsvColor) * LightColor.rgb * 2.0;
	//colorV = vec4(adjustedColor,Color.a);

	//visionPcntV = VisionPcnt;
	vec3 unpersp = vec3(ModelViewMatrix * vec4(Vertex,1.0));
	positionV = vec3(Vertex);

    unpersp.xy += Billboard;

	normalV = Normal;
	lightPcntV = LightPcnt;
	lightColorV = LightColor.rgb;

	gl_Position = ProjectionMatrix * vec4(unpersp,1.0);
}